---
- name: Set acme_force
  ansible.builtin.set_fact:
    acme_force: false
    when: acme_force is not defined

- name: Set acme_register_account
  ansible.builtin.set_fact:
    acme_register_account: false
    when: acme_register_account is not defined

- name: Set default ACME method
  ansible.builtin.set_fact:
    acme_method: 'http-01'
    when: acme_method is not defined

- name: Create {{ acme_certificate_dir }}  directory if it does not exist
  ansible.builtin.file:
    path: "{{ acme_certificate_dir }}"
    state: directory
    mode: '0755'

- name: Generate private key for ACME account
  community.crypto.openssl_privatekey:
    path: "{{ acme_certificate_dir }}/acme_account_key"
    type: RSA
    size: 2048
    mode: 0600

- name: Register ACME Account with external binding
  community.crypto.acme_account:
    account_key_src: "{{ acme_certificate_dir }}/acme_account_key"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    state: present
    terms_agreed: true
    contact:
      - "mailto:{{ acme_account_email }}"
    external_account_binding:
      "{{ lookup('file', acme_external_account_binding_file) | from_yaml }}"
  register: acme_account
  when: acme_register_account and acme_external_account_binding_file is defined

- name: Register ACME Account without external binding
  community.crypto.acme_account:
    account_key_src: "{{ acme_certificate_dir }}/acme_account_key"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    state: present
    terms_agreed: true
    contact:
      - "mailto:{{ acme_account_email }}"
  register: acme_account
  when: acme_register_account and acme_external_account_binding_file is not defined

- name: Generate private key for server
  community.crypto.openssl_privatekey:
    path: "{{ acme_certificate_dir }}/{{ acme_domain }}.key"
    type: RSA
    size: 2048
    mode: 0600

- name: Generate certificate signing request (CSR)
  community.crypto.openssl_csr:
    path: "{{ acme_certificate_dir }}/{{ acme_domain }}.csr"
    privatekey_path: "{{ acme_certificate_dir }}/{{ acme_domain }}.key"
    common_name: "{{ acme_domain }}"
    #subject_alt_name: "DNS:www.{{ acme_domain }},DNS:{{ acme_domain }}"
    subject_alt_name: "DNS:{{ acme_domain }}"

- name: Check if previous certificate exists
  ansible.builtin.stat:
    path: "{{ acme_certificate_dir }}/{{ acme_domain }}.crt"
  register: prev_cert

- name: Revoke previous certificate
  community.crypto.acme_certificate_revoke:
    account_key_src: "{{ acme_certificate_dir }}/acme_account_key"
    certificate: "{{ acme_certificate_dir }}/{{ acme_domain }}.crt"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
  when: prev_cert.stat.exists and acme_revoke

- name: Create a challenge
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_certificate_dir }}/acme_account_key"
    account_email: "{{ acme_account_email }}"
    csr: "{{ acme_certificate_dir }}/{{ acme_domain }}.csr"
    dest: "{{ acme_certificate_dir }}/{{ acme_domain }}}.crt"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    terms_agreed: true
    force: "{{ acme_force }}"
    modify_account: false
    challenge: "{{ acme_method }}"
  register: acme_challenge

- name: Show challenge
  ansible.builtin.debug: var=acme_challenge

- name: Add dns-01 challenge data to DNS
  community.general.nsupdate:
#        key_algorithm: "{{ bind.key_algorithm }}"
#        key_name: "{{ bind.key_name }}"
#        key_secret: "{{ bind.key_secret }}"
    server: "{{ bind.server }}"
    record: "{{ item.value['dns-01']['record'] }}."
    type: "TXT"
    value: "{{ item.value['dns-01']['resource_value'] | regex_replace('^(.*)$', '\"\\1\"') }}"
    state: present
  with_dict:
    - "{{ acme_challenge['challenge_data'] }}"
  when: acme_method == 'dns-01'

- name: Let the challenge(s) be validated and retrieve the cert and intermediate certificate
  community.crypto.acme_certificate:
    account_key_src: "{{ acme_certificate_dir }}/acme_account_key"
    csr: "{{ acme_certificate_dir }}/{{ acme_domain }}.csr"
    dest: "{{ acme_certificate_dir }}/{{ acme_domain }}.crt"
    fullchain_dest: "{{ acme_certificate_dir }}/{{ acme_domain }}-fullchain.crt"
    chain_dest: "{{ acme_certificate_dir }}/{{ acme_domain }}-intermediate.crt"
    data: "{{ acme_challenge }}"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    terms_agreed: true
    force: "{{ acme_force }}"
    modify_account: false
    challenge: "{{ acme_method }}"

- name: Clean http-01 challenge data from drive
  ansible.builtin.file:
    path: "{{ acme_web_dir }}/{{ item.value['http-01'].resource }}"
    state: absent
  with_dict:
    - "{{ acme_challenge['challenge_data'] }}"
  when: acme_method == 'http-01'

- name: Clean dns-01 challenge data from DNS
  community.general.nsupdate:
    #    key_algorithm: "{{ bind.key_algorithm }}"
    #key_name: "{{ bind.key_name }}"
    #key_secret: "{{ bind.key_secret }}"
    server: "{{ bind.server }}"
    record: "{{ item.value['dns-01'].record }}."
    type: "TXT"
    state: absent
  with_dict:
    - "{{ acme_challenge['challenge_data'] }}"
  when: acme_method == 'dns-01'

- name: Generate PKCS#12 file for dns-01 certificate
  openssl_pkcs12:
    action: export
    path: "{{ acme_certificate_dir }}/{{ acme_domain }}.pfx"
    friendly_name: "{{ acme_domain }}"
    privatekey_path:  "{{ acme_certificate_dir }}/{{ acme_domain }}.key"
    certificate_path: "{{ acme_certificate_dir }}/{{ acme_domain }}.crt"
    other_certificates: "{{ acme_certificate_dir }}/{{ acme_domain }}-fullchain.crt"
    state: present
  when: acme_method == 'dns-01'


